# Generated by Django 5.2.2 on 2025-06-06 15:11

import core.models
import datetime
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DayOfWeek',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(help_text='День (дни-недели)', max_length=50)),
            ],
            options={
                'verbose_name': 'Дни-недели',
                'verbose_name_plural': 'Дни-недели',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название класса', max_length=100)),
            ],
            options={
                'verbose_name': 'Класс',
                'verbose_name_plural': 'Классы',
            },
        ),
        migrations.CreateModel(
            name='Quarter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Четверть (I, II, III, IV)', max_length=3)),
            ],
            options={
                'verbose_name': 'Четверть',
                'verbose_name_plural': 'Четверть',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название предмета', max_length=250)),
            ],
            options={
                'verbose_name': 'Предмет',
                'verbose_name_plural': 'Предметы',
            },
        ),
        migrations.CreateModel(
            name='TypesOfSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Тип предмета', max_length=50)),
            ],
            options={
                'verbose_name': 'Тип предмета',
                'verbose_name_plural': 'Тип предмета',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('avatar', models.ImageField(help_text='Аватарка', null=True, upload_to='avatars/', validators=[core.models.max_limit_size_upload])),
                ('name', models.CharField(blank=True, max_length=150)),
                ('role', models.CharField(choices=[('student', 'ученик'), ('teacher', 'учитель')], default='student', verbose_name='роль')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(help_text='Класс ученика(-цы)', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.group')),
                ('user', models.ForeignKey(help_text='Ученик(-ца)', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ученик(-ца)',
                'verbose_name_plural': 'Ученики(-цы)',
            },
        ),
        migrations.AddField(
            model_name='group',
            name='subject',
            field=models.ManyToManyField(related_name='Предмет', to='core.subject'),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ManyToManyField(help_text='Классы которые обучает', to='core.group')),
                ('subject', models.ManyToManyField(help_text='Предметы', to='core.subject')),
                ('user', models.ForeignKey(help_text='Пользователь', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Учитель(-ница)')),
            ],
            options={
                'verbose_name': 'Учитель',
                'verbose_name_plural': 'Учителя',
            },
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.now, help_text='Дата добавления оценки')),
                ('mark', models.IntegerField(help_text='Оценка', validators=[core.models.ValueValidator])),
                ('group', models.ForeignKey(help_text='Предмет', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.group')),
                ('student', models.ForeignKey(help_text='Ученик(-ца)', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.student')),
                ('subject', models.ForeignKey(help_text='Предмет', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.subject')),
                ('teacher', models.ForeignKey(help_text='Преподаватель', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.teacher')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
            },
        ),
        migrations.CreateModel(
            name='Attedance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.now, help_text='Дата')),
                ('attedance_date', models.BooleanField(default=False, help_text='Отметка', null=True)),
                ('group', models.ForeignKey(help_text='Класс', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.group')),
                ('student', models.ForeignKey(help_text='Ученик(-ца)', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.student')),
                ('subject', models.ForeignKey(help_text='Предмет', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.subject')),
                ('teacher', models.ForeignKey(help_text='Преподаватель', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.teacher')),
            ],
            options={
                'verbose_name': 'Посещаемость',
                'verbose_name_plural': 'Посещаемость',
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(help_text='Тема', max_length=200)),
                ('about', models.TextField(help_text='Объявление')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата и время выдачи теста')),
                ('link', models.TextField(blank=True, help_text='Ссылка', null=True)),
                ('teacher', models.ForeignKey(help_text='Преподаватель', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.teacher')),
            ],
            options={
                'verbose_name': 'Объявления',
                'verbose_name_plural': 'Объявлении',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about', models.TextField(blank=True, help_text='Текс', null=True)),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата и время выдачи теста')),
                ('link', models.TextField(help_text='Ссылка', null=True)),
                ('group', models.ForeignKey(help_text='Класс', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.group')),
                ('subject', models.ForeignKey(help_text='Предмет', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.subject')),
                ('teacher', models.ForeignKey(help_text='Преподаватель', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.teacher')),
            ],
            options={
                'verbose_name': 'Тест',
                'verbose_name_plural': 'Тесты',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about', models.TextField(help_text='Задание')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата и время выдачи задания')),
                ('link', models.TextField(blank=True, help_text='Ссылка', null=True)),
                ('group', models.ForeignKey(help_text='Класс', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.group')),
                ('subject', models.ForeignKey(help_text='Предмет', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.subject')),
                ('teacher', models.ForeignKey(help_text='Преподаватль', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.teacher')),
                ('types', models.ForeignKey(help_text='Тип предмета', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.typesofsubject')),
            ],
            options={
                'verbose_name': 'Домашнее задание',
                'verbose_name_plural': 'Домашние задания',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hour', models.IntegerField(help_text='Время')),
                ('day', models.ForeignKey(help_text='День (дни-недели)', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.dayofweek')),
                ('group', models.ForeignKey(help_text='Класс', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.group')),
                ('subject', models.ForeignKey(help_text='Предмет', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.subject')),
                ('teacher', models.ForeignKey(help_text='Преподаватель', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.teacher')),
                ('types', models.ForeignKey(help_text='Тип предмета', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.typesofsubject')),
            ],
            options={
                'verbose_name': 'Расписание',
                'verbose_name_plural': 'Расписание',
            },
        ),
    ]
